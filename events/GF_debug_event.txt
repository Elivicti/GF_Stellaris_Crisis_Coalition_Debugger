namespace = gfdebug

country_event = {
	id = gfdebug.0
	desc = BLANK_STRING

	is_triggered_only = yes

	immediate = {
		set_country_flag = flag_GF_collapse_relic_surveyed
		set_country_flag = flag_GF_first_zion_comm_completed
		set_country_flag = flag_GF_established_communication_with_zion
	}

	option = {
		name = OK
		add_modifier = {
			modifier = GF_debug_modifier
			multiplier = 100000
		}
		# add_modifier = {
		# 	modifier = GF_debug_cons
		# 	multiplier = 100000
		# }
		give_technology = {
			tech = GF_tech_collapse_relic_tech
			message = no
		}
		give_technology = {
			tech = GF_tech_collapsetech_weaponize
			message = no
		}
		give_technology = {
			tech = GF_tech_collapse_energy_lance
			message = no
		}
		give_technology = {
			tech = GF_tech_collapse_jump_drive
			message = no
		}
		give_technology = {
			tech = tech_cloning
			message = no
		}
		give_technology = {
			tech = tech_quantum_catapult
			message = no
		}
		give_technology = {
			tech = GF_tech_combat_ogas_computers
			message = no
		}
		add_relic = GF_relic_orb_mainframe_alpha
		set_variable = {
			which = v_GF_zion_favor
			value = 10
		}
	}

	after = {
		country_event = {
			id = gfdebug.1
			days = 31
		}
	}
}

country_event = {
	id = gfdebug.1
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		end_event_chain = GF_collect_relic_device_event_chain
	}
}

country_event = {
	id = gfdebug.2
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_owned_leader = {
			limit = {
				NOT = { is_ruler = yes }
			}
			save_event_target_as = choosing_leader
		}
		country_event = {
			id = GF_zion_project.32204
		}
	}
}

country_event = {
	id = gfdebug.3

	is_triggered_only = yes

	option = {
		name = OK
		create_leader = {
			class = commander
			species = owner
			skill = 4
			set_age = 21
			effect = {
				remove_all_traits = yes
				add_trait_no_notify = subclass_commander_general
				add_trait_no_notify = leader_trait_heavy_hitter
				add_trait_no_notify = leader_trait_restrained_2
			}
		}
	}

	after = {
		export_trigger_value_to_variable = {
			trigger = count_owned_leader
			parameters = { limit = { species = { is_robotic = yes } GF_leader_has_vanilla_negative_traits = yes } }
			variable = lcnt
		}
	}
}

country_event = {
	id = gfdebug.4

	is_triggered_only = yes

	option = {
		name = OK
		### Tier 1
		add_modifier = { modifier = GF_zion_deep_dive_all_research_speed_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_all_research_produces_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_physics_research_produces_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_society_research_produces_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_engineering_research_produces_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_robotic_produces_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_base_intel_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_crime_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_planet_development_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_army_exp_1 years = 3 }
		# debuff
		add_modifier = { modifier = GF_zion_deep_dive_all_research_speed_n_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_robot_produces_n_1 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_crime_n_1 years = 3 }
		### Tier 2
		add_modifier = { modifier = GF_zion_deep_dive_all_research_produces_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_planet_development_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_army_exp_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_robotic_produces_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_ship_fire_power_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_ship_exp_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_empire_size_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_station_produces_2 years = 3 }
		# debuff
		add_modifier = { modifier = GF_zion_deep_dive_ship_fire_power_n_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_empire_size_n_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_all_research_speed_n_2 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_robot_produces_n_2 years = 3 }
		### Tier 3
		add_modifier = { modifier = GF_zion_deep_dive_research_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_production_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_diplomacy_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_fleet_3 years = 3 }
		# debuff
		add_modifier = { modifier = GF_zion_deep_dive_research_n_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_production_n_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_diplomacy_n_3 years = 3 }
		add_modifier = { modifier = GF_zion_deep_dive_fleet_n_3 years = 3 }
		# Tier 4
		add_modifier = { modifier = GF_zion_deep_dive_data_horizon years = 3 }
	}
}

country_event = {
	id = gfdebug.5
	is_triggered_only = yes

	option = {
		name = OK
		every_owned_species = {
			limit = {
				has_trait = GF_trait_sequela
			}
			change_species_characteristics = {
				add_trait = GF_trait_sequela_immune
				remove_trait = GF_trait_sequela
				add_traits_at_start_of_list = yes
			}
		}
	}
}

country_event = {
	id = gfdebug.6
	is_triggered_only = yes

	option = {
		name = OK
		add_resource = {
			energy = 500000
			unity  = 500000
		}
		add_modifier = {
			modifier = sponsored_rebels
			multiplier = 1000
		}
		add_relic = GF_relic_data_singularity
	}
}

planet_event = {
	id = gfdebug.7
	is_triggered_only = yes

	option = {
		name = OK

		create_species = {
			name = "测试机器人"
			class = ROBOT
			traits = random
			effect = {
				save_event_target_as = robot_species
			}
		}
		while = {
			count = 10
			create_pop = {
				species = event_target:robot_species
				ethos = root
			}
		}
	}
}

country_event = {
	id = gfdebug.8
	is_triggered_only = yes
	
	option = {
		name = OK
		add_resource = {
			influence = 1000
		}
		add_modifier = {
			modifier = GF_debug_modifier
			multiplier = 5000
		}
		random_system = {
			limit = {
				any_neighbor_system = {
					NOR = {
						exists = owner
						exists = space_owner
					}
				}
				distance = {
					source = root.capital_scope.solar_system
					min_jumps = 3
					max_jumps = 5
				}
				NOT = {
					any_fleet_in_system = {
						owner = { is_hostile = root }
					}
				}
				any_system_planet = {
					is_a_planet = yes
					NOT = { has_modifier = holy_planet }
				}
			}
			set_surveyed = {
				surveyed = yes
				surveyor = root
			}
			random_system_planet = {
				limit = {
					OR = {
						is_a_planet = yes
						habitable_planet = yes
					}
					NOR = {
						has_anomaly = yes
						exists = archaeological_site
						has_modifier = holy_planet
					}
				}
				save_event_target_as = colony
			}

			event_target:colony = {
				if = {
					limit = {
						NOT = { is_planet_class = pc_gaia }
					}
					change_pc = pc_gaia
					reroll_planet = yes
				}
				set_planet_size = 30
				create_colony = {
					owner = root
					species = root
				}
				while = {
					count = 15
					add_district = district_city
					if = {
						limit = { num_pops <= 10 }
						create_pop = { species = root }
					}
				}
			}

			create_starbase = {
				size = starbase_outpost
				owner = root.owner
			}
		}
	}
}

country_event = {
	id = gfdebug.9
	is_triggered_only = yes

	# hide_window = yes

	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll_species
		}
	}

	option = {
		name = OK
		every_subject = {
			limit = { is_valid_GF_OGAS_subnet = yes }
			capital_scope = {
				while = {
					count = 20
					create_pop = { species = event_target:doll_species }
				}
			}
		}
	}
}


country_event = {
	id = gfdebug.10
	is_triggered_only = yes

	trigger = {
		
	}
	immediate = {
		clear_global_event_target = evt_leader
		random_owned_leader = { save_global_event_target_as = evt_leader }
	}

	option = {
		name = OK
	}
}

country_event = {
	id = gfdebug.11
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		any_owned_pop = {
			has_trait = GF_trait_doll
			has_citizenship_rights = yes
		}
	}

	immediate = {
		add_modifier = {
			modifier = GF_debug_12
		}
		add_modifier = {
			modifier = GF_debug_leaders
			mult = 20
		}
		while = {
			count = 10
			create_leader = {
				class = commander
				species = owner
				skill = 10
				randomize_traits = no
			}
		}
	}
}

country_event = {
	id = gfdebug.12
	is_triggered_only = yes

	diplomatic = yes

	diplomatic_title = "diplomatic_title"
	title = "event_title"
	desc = "event_desc"

	custom_gui = "gf_gui_test"
	custom_gui_option = "gf_gui_test_option"
	
	picture_event_data = {
		portrait = event_target:GF_ogas_leader
		room = ethic_griffin_room
	}

	trigger = {
		GF_should_country_has_collapse_liquid_deficit_debuff = {
			OR_HAS_TECH = GF_tech_collapsetech_weaponize
		}
	}

	option = {
		name = "opt_1"
		is_dialog_only = yes
		response_text = "AAA"
		set_country_flag = flag_AAA
	}
	option = {
		name = "opt_2"
		tooltip = {
			add_resource = {
				GF_nyto_collapse_liquid = 500
			}
		}
	}
	option = {
		name = "opt_3"
	}
	option = {
		name = "opt_4"
	}
	option = {
		name = "opt_5"
	}
	option = {
		name = "opt_6"
	}
	option = {
		name = "opt_7"
	}
	option = {
		name = "opt_8"
	}
	option = {
		name = "opt_9"
	}
	option = {
		name = "opt_10"
	}
}

country_event = {
	id = gfdebug.13
	is_triggered_only = yes

	diplomatic = yes

	diplomatic_title = "diplomatic_title"
	title = "event_title"
	desc = "event_desc"

	custom_gui = GF_DiplomaticEventWindow
	custom_gui_option = GF_DiplomaticEventWindow_Option
	
	picture_event_data = {
		portrait = event_target:GF_ogas_leader
		room = ethic_griffin_room
	}

	immediate = {
		if = {
			limit = { NOT = { is_variable_set = v_GF_core_chip_mod } }
			set_variable = {
				which = v_GF_core_chip_mod
				value = 1
			}
		}
	}

	option = {
		name = "OK"
		add_modifier = {
			modifier = GF_debug_5
			multiplier = v_GF_core_chip_mod
		}
	}
	option = {
		name = "ADD_1"
		change_variable = {
			which = v_GF_core_chip_mod
			value = 1
		}
		is_dialog_only = yes
		response_text = event_desc
	}
	option = {
		name = "ADD_5"
		change_variable = {
			which = v_GF_core_chip_mod
			value = 5
		}
		is_dialog_only = yes
		response_text = event_desc
	}
	option = {
		name = "SUB_5"
		change_variable = {
			which = v_GF_core_chip_mod
			value = -5
		}
		is_dialog_only = yes
		response_text = event_desc
	}
	option = {
		name = "SUB_1"
		change_variable = {
			which = v_GF_core_chip_mod
			value = -1
		}
		is_dialog_only = yes
		response_text = event_desc
	}

	option = {
		name = REMOVE
		allow = { has_modifier = GF_debug_5 }
		if = {
			limit = { has_modifier = GF_debug_5 }
			remove_modifier = GF_debug_5
		}
		is_dialog_only = yes
		response_text = event_desc
	}
	option = {
		name = CANCEL
	}
}

@change_interval = 30

country_event = {
	id = gfdebug.20
	is_triggered_only = yes
	
	hide_window = yes

	immediate = {
		set_empire_name = "EMPIRE_DESIGN_GF_URNC"
		change_country_flag = {
			icon = {
				category = "gk"
				file = "griffin_flags_05.dds"
			}
			background = {
				category = "backgrounds"
				file = "circle.dds"
			}
			colors = {
				"red"
				"black"
				"null"
				"null"
			}
		}
		clear_ethos = yes
		change_government = { authority = GF_auth_commonwealth civics = { civic = GF_civic_URNC civic = GF_civic_KCCO } }
		shift_ethic = ethic_militarist
		shift_ethic = ethic_egalitarian
		shift_ethic = ethic_materialist
		
		country_event = {
			id = gfdebug.21
			days = @change_interval
		}
	}
}

country_event = {
	id = gfdebug.21
	is_triggered_only = yes
	
	hide_window = yes

	immediate = {
		set_empire_name = "EMPIRE_DESIGN_GF_AU"
		change_country_flag = {
			icon = {
				category = "gk"
				file = "griffin_flags_04.dds"
			}
			background = {
				category = "backgrounds"
				file = "flag_BG_43.dds"
			}
			colors = {
				"sky_blue"
				"mist_blue"
				"null"
				"null"
			}
		}
		clear_ethos = yes
		change_government = { authority = GF_auth_commonwealth civics = { civic = GF_civic_AU civic = GF_civic_TASA } }
		shift_ethic = ethic_authoritarian
		shift_ethic = ethic_militarist
		shift_ethic = ethic_materialist

		country_event = {
			id = gfdebug.22
			days = @change_interval
		}
	}
}

country_event = {
	id = gfdebug.22
	is_triggered_only = yes
	
	hide_window = yes

	immediate = {
		set_empire_name = "EMPIRE_DESIGN_GF_GK"
		change_country_flag = {
			icon = {
				category = "gk"
				file = "griffin_flags_01.dds"
			}
			background = {
				category = "backgrounds"
				file = "v.dds"
			}
			colors = {
				"dark_grey"
				"yellow"
				"null"
				"null"
			}
		}
		clear_ethos = yes
		change_government = { authority = GF_auth_commonwealth civics = { civic = GF_civic_GK civic = GF_civic_IOP } }
		shift_ethic = ethic_egalitarian
		shift_ethic = ethic_xenophile
		shift_ethic = ethic_militarist
	}
}

country_event = {
	id = gfdebug.14
	is_triggered_only = yes

	option = {
		name = OK

		capital_scope = {
			create_species = {
				name = "GF_ANDROID"
				class = GF_doll
				portrait = GF_doll
				name_list = GF_DOLL
				traits = {
					trait = GF_trait_doll
				}
				effect = {
					save_event_target_as = doll_species
				}
			}
			while = {
				count = 5
				create_pop = {
					species = event_target:doll_species
					ethos = root
				}
			}
		}
	}
}

country_event = {
	id = gfdebug.15
	is_triggered_only = yes

	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll_species
		}
	}
	
	option = {
		name = OK
		add_resource = {
			influence = 1000
		}
		add_modifier = {
			modifier = GF_debug_modifier
			multiplier = 5000
		}
		random_system = {
			limit = {
				any_neighbor_system = {
					NOR = {
						exists = owner
						exists = space_owner
					}
				}
				distance = {
					source = root.capital_scope.solar_system
					min_jumps = 3
					max_jumps = 5
				}
				NOT = {
					any_fleet_in_system = {
						owner = { is_hostile = root }
					}
				}
				any_system_planet = { is_a_planet = yes }
			}
			set_surveyed = {
				surveyed = yes
				surveyor = root
			}
			random_system_planet = {
				limit = {
					OR = {
						AND = {
							is_a_planet = yes
							is_asteroid = no
						}
						habitable_planet = yes
					}
					NOR = {
						has_anomaly = yes
						exists = archaeological_site
					}
				}
				save_event_target_as = colony
			}

			event_target:colony = {
				if = {
					limit = {
						NOT = { is_planet_class = pc_gaia }
					}
					change_pc = pc_gaia
					reroll_planet = yes
				}
				set_planet_size = 30
				create_colony = {
					owner = root
					species = event_target:doll_species
				}
				while = {
					count = 3
					create_pop = { species = event_target:doll_species }
				}
			}

			create_starbase = {
				size = starbase_outpost
				owner = root.owner
			}
		}
	}
}

country_event = {
	id = gfdebug.16

	is_triggered_only = yes
	trigger = {
		any_owned_species = { has_trait = GF_trait_sequela }
		any_owned_species = { has_trait = GF_trait_doll }
	}
	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_sequela }
			save_event_target_as = human
		}
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll
			set_citizenship_type = {
				type = citizenship_GF_doll_full
				country = prev
				cooldown = no
			}
		}
	}

	option = {
		name = OK
		allow = {
			event_target:human = {
				any_species_pop = { has_citizenship_rights = yes }
				has_citizenship_type = {
					type = citizenship_full
					country = prev
				}
			}
		}
	}
	option = {
		name = OK
		allow = {
			event_target:doll = {
				any_species_pop = { has_citizenship_rights = yes }
				has_citizenship_type = {
					type = citizenship_GF_doll_full
					country = prev
				}
			}
		}
	}

	option = {
		name = CANCEL
	}
}

country_event = {
	id = gfdebug.30

	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = block_this_event }
	}

	immediate = {
		set_timed_country_flag = {
			flag = block_this_event
			days = 10
		}
		country_event = {
			id = gfdebug.30
			days = 10
		}
	}

	option = { name = OK }
}

country_event = {
	id = gfdebug.100
	is_triggered_only = yes

	title = BLANK_STRING
	desc = BLANK_STRING

	option = {
		name = OK
		create_leader = {
			class = official
			species = owner_main_species
			skill = 1

			effect = {
				remove_all_traits = yes
				add_trait_no_notify = lt_test_councilor
				add_trait_no_notify = lt_test_self
				add_trait_no_notify = lt_test_self_councilor
				add_trait_no_notify = lt_test_planet
				save_global_event_target_as = test_leader
			}
		}
	}
}

country_event = {
	id = gfdebug.101
	is_triggered_only = yes

	title = BLANK_STRING
	desc = BLANK_STRING

	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll_species
		}
	}

	option = {
		name = BLANK_STRING
		add_modifier = { modifier = GF_debug_3 }
		random_system = {
			limit = {
				any_neighbor_system = {
					NOR = {
						exists = owner
						exists = space_owner
					}
				}
				distance = {
					source = prev
					min_jumps = 3
					max_jumps = 5
				}
				NOT = {
					any_fleet_in_system = {
						owner = { is_hostile = root }
					}
				}
				any_system_planet = {
					is_a_planet = yes
					is_moon = no
					NOT = { has_modifier = holy_planet }
				}
			}
			create_starbase = {
				size = starbase_outpost
				owner = root.owner
			}
			random_system_planet = {
				limit = {
					is_a_planet = yes
					is_moon = no
					NOT = { has_modifier = holy_planet }
				}
				change_pc = pc_GF_sf_machine
				clear_deposits = yes
				set_planet_size = 25
				create_colony = {
					owner = root
					species = event_target:doll_species
				}
			}
		}
	}
}

country_event = {
	id = gfdebug.102
	is_triggered_only = yes

	title = BLANK_STRING
	desc = BLANK_STRING

	immediate = {
	}

	option = {
		name = BLANK_STRING
		add_modifier = { modifier = GF_debug_3 }
		random_system = {
			limit = {
				any_neighbor_system = {
					NOR = {
						exists = owner
						exists = space_owner
					}
				}
				distance = {
					source = prev
					min_jumps = 3
					max_jumps = 5
				}
				NOT = {
					any_fleet_in_system = {
						owner = { is_hostile = root }
					}
				}
				any_system_planet = {
					is_a_planet = yes
					is_moon = no
					NOT = { has_modifier = holy_planet }
				}
			}
			create_starbase = {
				size = starbase_outpost
				owner = root
			}
			random_system_planet = {
				limit = {
					is_a_planet = yes
					is_moon = no
					NOT = { has_modifier = holy_planet }
				}
				change_pc = pc_GF_sf_machine
				clear_deposits = yes
				set_planet_size = 25
			}
		}
	}
}

country_event = {
	id = gfdebug.103

	is_triggered_only = yes

	immediate = {
	}

	option = {
		name = "OK"
		add_modifier = { modifier = GF_debug_3 }
		capital_scope.solar_system = {
			closest_system = {
				min_steps = 2
				max_steps = 5
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = GF_sf_system
				}
			}
			last_created_system = {
				star = {
					create_ambient_object = {
						type = "contingency_2"
						location = this
					}
					last_created_ambient_object = {
						set_ambient_object_flag = contingency_system_effect_2
						set_location = {
							target = prev
							distance = 0
							angle = random
						}
					}
					set_crisis_sound = ai_empire_ambient_stage_1
				}
				set_surveyed = {
					surveyed = yes
					surveyor = root
				}
				create_starbase = {
					size = starbase_starfortress
					owner = root

					module = shipyard
					module = shipyard
					module = shipyard
					module = shipyard
					module = shipyard
					module = shipyard
				}
			}
			add_extra_hyperlane_to_spawned_system_effect = yes
		}
	}
}

country_event = {
	id = gfdebug.104
	
	is_triggered_only = yes
	trigger = {
	}

	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll_species
		}
	}

	option = {
		name = OK
		if = {
			limit = {
				any_owned_leader = {
					NOT = { has_trait = GF_trait_leader_ogas }
					species = { has_trait = GF_trait_doll }
				}
			}
			every_owned_leader = {
				limit = {
					NOT = { has_trait = GF_trait_leader_ogas }
					species = { has_trait = GF_trait_doll }
				}
				locked_random_list = {
					1 = { add_trait = leader_trait_stubborn					} # 顽固
					1 = { add_trait = leader_trait_rigid_programming		} # 死板编程
					1 = { add_trait = leader_trait_erratic_morality_core	} # 不稳定道德核心
					1 = { add_trait = leader_trait_unstable_code_base		} # 不稳定代码库
					1 = { add_trait = leader_trait_substance_abuser			} # 药物依赖
					1 = { add_trait = leader_trait_arrested_development		} # 没有前途
					1 = { add_trait = leader_trait_nervous					} # 神经质
					1 = { add_trait = leader_trait_lethargic				} # 懒散
					1 = { add_trait = leader_trait_armchair_commander		} # 纸上谈兵
					1 = { add_trait = leader_trait_paranoid					} # 偏执
					1 = { add_trait = leader_trait_corrupt					} # 腐败
					1 = { add_trait = leader_trait_traumatized				} # 受挫
					1 = { add_trait = leader_trait_maimed					} # 残废
				}
			}
		}
		else = {
			while = {
				count = 5
				create_leader = {
					class = scientist
					species = event_target:doll_species

					effect = {
						random_list = {
							1 = { add_trait = leader_trait_stubborn					} # 顽固
							1 = { add_trait = leader_trait_rigid_programming		} # 死板编程
							1 = { add_trait = leader_trait_erratic_morality_core	} # 不稳定道德核心
							1 = { add_trait = leader_trait_unstable_code_base		} # 不稳定代码库
							1 = { add_trait = leader_trait_substance_abuser			} # 药物依赖
							1 = { add_trait = leader_trait_arrested_development		} # 没有前途
							1 = { add_trait = leader_trait_nervous					} # 神经质
							1 = { add_trait = leader_trait_lethargic				} # 懒散
							1 = { add_trait = leader_trait_armchair_commander		} # 纸上谈兵
							1 = { add_trait = leader_trait_paranoid					} # 偏执
							1 = { add_trait = leader_trait_corrupt					} # 腐败
							1 = { add_trait = leader_trait_traumatized				} # 受挫
							1 = { add_trait = leader_trait_maimed					} # 残废
						}
					}
				}
			}
			
		}

	}
}

country_event = {
	id = gfdebug.105

	is_triggered_only = yes

	immediate = {
		remove_global_flag = GF_Stellairs_Crisis_Coalition_Extension_Installed
		remove_global_flag = GF_Stellairs_Crisis_Coalition_Extension_Enabled

		set_variable = { which = lcnt value = 0 }

		export_trigger_value_to_variable = {
			trigger = count_owned_leader
			parameters = { limit = { GF_is_doll_leader = yes } }
			variable = lcnt
		}
		every_envoy = {
			limit = { GF_is_doll_leader = yes }
			owner = { change_variable = { which = lcnt value = 1 } }
		}
	}

	option = {
		name = OK
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll
		}
		while = {
			count = 5
			create_leader = {
				species = owner_main_species
				class = random
			}
			last_created_leader = {
				change_species = event_target:doll
				add_trait = GF_trait_leader_doll
			}
		}
	}
}


# on_war_lost
# Root = Loser Warleader
# From = Winner Warleader
# FromFrom = War
country_event = {
	id = gfdebug.120
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		log = "--- [fromfrom.GetName] ---"
		log = "loser  warleader = [this.GetName]"
		log = "winner warleader = [from.GetName]"
		fromfrom = {
			log = " -- defenders -- "
			every_defender = { log = "defender = [this.GetName]" }
			log = " -- attackers -- "
			every_attacker = { log = "attacker = [this.GetName]" }
			log = " --  winners  -- "
			every_war_participant = {
				limit = {
					is_war_participant = {
						war = prev
						side = root.from
					}
				}
				log = "winner = [this.GetName]"
			}
			log = " --  losers   -- "
			every_war_participant = {
				limit = {
					is_war_participant = {
						war = prev
						side = root
					}
				}
				log = "loser = [this.GetName]"
			}
		}
		log = "-----------------"
	}
}

planet_event = {
	id = gfdebug.150
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		set_planet_flag = GF_debug_sys_1
		solar_system = {
			set_star_flag = GF_debug_sys_1
			add_modifier = {
				modifier = GF_debug_sys_1
				mult = 1000
				days = 180
			}
		}
	}
}

planet_event = {
	id = gfdebug.151
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		set_planet_flag = GF_debug_sys_2
		solar_system = {
			set_star_flag = GF_debug_sys_2
			add_modifier = {
				modifier = GF_debug_sys_2
				mult = 1000
				days = 180
			}
		}

		
	}
}


country_event = {
	id = gfdebug.200
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		random_owned_leader = {
			limit = { GF_is_ogas_leader = yes }
			leader_event = { id = gfdebug.201 }
		}
	}
}

leader_event = {
	id = gfdebug.201
	title = gfdebug.201.name
	desc = gfdebug.201.desc

	custom_gui = GF_OGAS_LeaderStoryEventWindow
	custom_gui_option = GF_OGAS_story_event_option_entry

	picture = GFX_evt_legendary_leader
	event_window_type = leader_story

	picture_event_data = {
		room = owner
		portrait = this
	}

	is_triggered_only = yes
	immediate = {

	}

	option = {
		name = OK
	}
	option = {
		name = OK
	}
	option = {
		name = OK
	}
	option = {
		name = OK
	}
	option = {
		name = OK
	}
}

country_event = {
	id = gfdebug.565
	is_triggered_only = yes

	trigger = {
		exists = last_created_design
		last_created_design = {
			has_component = GF_COLLAPSE_JUMP_DRIVE
		}
	}
	immediate = {
		last_created_design = {
			set_design_flag = collapse_jump
		}

	}
	option = {
		name = OK
	}
}

fleet_event = {
	id = gfdebug.1000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = { has_star_flag = sys }
	}

	immediate = {
		every_owned_ship = {
			export_modifier_to_variable = {
				modifier = ship_ftl_jumpdrive_range_mult
				variable = jumpdrive_range
			}
			change_variable = {
				which = jumpdrive_range
				value = 1
			}
			multiply_variable = {
				which = jumpdrive_range
				value = -1
			}
			add_modifier = {
				modifier = GF_debug_sys_2
				multiplier = jumpdrive_range
			}
		}
		owner = {
			country_event = { id = gfdebug.1002 }
		}

	}
}

fleet_event = {
	id = gfdebug.1001
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { NOT = { has_star_flag = sys } }
		any_owned_ship = { has_modifier = GF_debug_sys_2 }
	}

	immediate = {
		every_owned_ship = {
			remove_modifier = GF_debug_sys_2
		}
		owner = {
			country_event = { id = gfdebug.1002 }
		}
	}
}

country_event = {
	id = gfdebug.1002
	desc = gfdebug.1002.desc

	is_triggered_only = yes
	trigger = {
	}

	immediate = {
	}
	option = {
		name = OK
	}
}

country_event = {
	id = gfdebug.800

	is_triggered_only = yes

	option = {
		name = OK
		random_system = {
			limit = {
				distance = {
					source = root.capital_scope.solar_system
					max_jumps = 2
				}
				any_system_planet = { is_asteroid = yes }
			}
			create_starbase = {
				size = starbase_outpost
				owner = root.owner
			}
			random_system_planet = {
				limit = {
					is_asteroid = yes
				}
				change_pc = pc_habitat
				reroll_deposits = yes
				create_colony = {
					owner = root
					species = root
				}
			}
		}
		
		random_system = {
			limit = {
				distance = {
					source = root.capital_scope.solar_system
					max_jumps = 2
				}
				any_system_planet = {
					is_a_planet = yes
				}
			}
			create_starbase = {
				size = starbase_outpost
				owner = root.owner
			}
			random_system_planet = {
				limit = {
					is_a_planet = yes
				}
				change_pc = pc_continental
				reroll_deposits = yes
				create_colony = {
					owner = root
					species = root
				}
			}
		}
	}
}

event = {
	id = gfdebug.900
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		every_country = {
			limit = {
				is_country_type = default
			}
			# if = {
			# 	limit = { NOT = { has_global_flag = host_country_set } }
			# 	set_country_flag = host_country
			# }
			# fire_on_action = {
			# 	on_action = test_on_action
			# }
		}
	}
}

country_event = {
	id = gfdebug.901
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = host_country_set }
	}

	immediate = {
		set_global_flag = host_country_set
		set_country_flag = host_country
	}
}

country_event = {
	id = gfdebug.902
	is_triggered_only = yes
	trigger = {
		
	}

	immediate = {
		if = {
			limit = {
				NOT = { is_variable_set = v_GF_zion_favor }
			}
			set_variable = {
				which = v_GF_zion_favor
				value = 0
			}
		}
	}

	option = {
		name = OK
		GF_change_zion_favor = { VALUE = 10 }
		GF_change_zion_favor = { VALUE = 0 }
		GF_change_zion_favor = { VALUE = -10 }
	}

	option = {
		name = OK
		allow = {
			GF_zion_require_resource_stockpile = {
				RES = energy
				TIER = 1
			}
		}
		GF_zion_project_cost = {
			RES = energy
			TIER = 1
		}
	}

	option = {
		name = OK
	}
}



country_event = {
	id = gfdebug.910

	is_triggered_only = yes

	option = {
		name = OK
		
		add_relic = GF_relic_orb_mainframe_alpha
		set_country_flag = flag_GF_artifact_analyse_orb_mainframe_alpha_finished
		give_technology = {
			tech = GF_tech_ternary_quantum_computing
			message = no
		}
		give_technology = {
			tech = GF_tech_ogas_computing_center
			message = no
		}
	}
}



country_event = {
	id = gfdebug.915
	title = aaa
	desc = aaa

	is_triggered_only = yes
	immediate = {
		random_galaxy_species = {
			limit = { is_species_class = GF_doll }
			save_event_target_as = doll_species
		}
	}

	option = {
		name = OK
		create_leader = {
			name = random
			species = event_target:doll_species
			class = official
			traits = {
				trait = GF_trait_leader_ogas
				trait = GF_trait_leader_ogas_glitch
				trait = GF_trait_leader_ogas_subnet_core
			}
		}
		create_leader = {
			name = random
			species = event_target:doll_species
			class = official
			traits = {
				trait = GF_trait_leader_ogas_2
			}
		}
		create_leader = {
			name = random
			species = owner
			class = scientist
			
			traits = { trait = GF_trait_leader_scientist_16lab }
		}
		create_leader = {
			name = random
			species = event_target:doll_species
			class = official

			traits = {
				trait = GF_trait_leader_doll
				trait = GF_trait_leader_official_plus
				trait = GF_trait_leader_enhanced_official
				trait = GF_trait_leader_core_glitch_official
			}
		}
		create_leader = {
			name = random
			species = event_target:doll_species
			class = scientist

			traits = {
				trait = GF_trait_leader_doll
				trait = GF_trait_leader_scientist_plus
				trait = GF_trait_leader_enhanced_scientist
				trait = GF_trait_leader_core_glitch_scientist
			}
		}
		create_leader = {
			name = random
			species = event_target:doll_species
			class = commander

			traits = {
				trait = GF_trait_leader_doll
				trait = GF_trait_leader_commander_plus
				trait = GF_trait_leader_enhanced_commander
				trait = GF_trait_leader_core_glitch_commander
			}
		}
	}
}

planet_event = {
	id = gfdebug.920
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		change_pc = pc_GF_automated_city
		set_planet_entity = {
			entity = GF_automated_city_planet
			graphical_culture = owner
		}
		set_planet_flag = flag_p_GF_automated_city_base_resources
		set_planet_flag = flag_p_GF_automated_city_advanced_resources
		set_planet_flag = flag_p_GF_automated_city_special_resources
		set_planet_size = 25
		if = {
			limit = { is_colony = no }
			random_country = {
				limit = { is_ai = no }
				save_event_target_as = player
			}
			create_colony = {
				species = event_target:player
				owner = event_target:player
			}
		}
		else = { owner = { save_event_target_as = player } }
		event_target:player = {
			add_relic = GF_relic_orb_mainframe_alpha
			set_country_flag = flag_GF_artifact_analyse_orb_mainframe_alpha_finished
			give_technology = {
				tech = GF_tech_ternary_quantum_computing
				message = no
			}
			add_modifier = {
				modifier = GF_debug_4
				multiplier = 20
			}
		}
		add_modifier = { modifier = GF_automated_city_construction_ongoing days = 540 }
		add_modifier = { modifier = GF_automated_city_status }

		if = {
			limit = { free_building_slots < 1 }
			remove_last_built_building = yes
		}
		add_building = building_GF_connection_nexus
		every_owned_pop = { pop_change_ethic = ethic_egalitarian }
	}
}

country_event = {
	id = gfdebug.930

	is_triggered_only = yes
	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll
		}
		random_owned_leader = {
			limit = { is_ruler = no }
			change_leader_portrait = new_type
		}
		every_pool_leader = { kill_leader = { show_notification = no } }

	}

	option = {
		name = OK
		create_leader = {
			name = random
			gender = female
			class = scientist
			species = event_target:doll
			traits = {
				trait = GF_trait_leader_scientist_16lab
			}
			effect = {
				change_leader_portrait = GF_doll_000
			}
		}
	}
}

planet_event = {
	id = gfdebug.940

	is_triggered_only = yes
	immediate = {
		create_country = {
			type = faction
			effect = {
				set_faction_hostility = {
					target = root.owner
					#set_friendly = yes
					set_neutral = yes
				}
				save_event_target_as = test_country
			}
		}
	}

	option = {
		name = OK
		create_army = {
			type = GF_army_defensive_armored_train
			owner = event_target:test_country
		}
		last_created_army = {
			set_owner = root.owner
		}
	}
}

country_event = {
	id = gfdebug.950

	trigger = {

	}
	is_triggered_only = yes
	immediate = {
		give_technology = { tech = GF_tech_observe_reflection message = no  }
		give_technology = { tech = GF_tech_mass_rebuild_function message = no }
		give_technology = { tech = GF_tech_collapse message = no }
		give_technology = { tech = GF_tech_recover_plan message = no }
		give_technology = { tech = GF_tech_ecological_recovery message = no }
	}

	option = {
		name = OK
		country_event = { id = GF_relic.0 }
		add_resource = {
			energy = 100000
			alloys = 100000
			influence = 1000
		}
		add_modifier = { modifier = GF_debug_modifier multiplier = 100000 }
		add_modifier = { modifier = GF_debug_6 }
	}
}

planet_event = {
	id = gfdebug.960

	is_triggered_only = yes

	immediate = {
		create_species = {
			name = random
			class = random_non_machine
			effect = { save_event_target_as = enemy_species }
		}
		create_country = {
			type = default
			name = random
			authority = random
			ethos = random
			civics = random
			flag = random
			species = event_target:enemy_species
			effect = { save_event_target_as = enemy_country }
		}
	}

	option = {
		name = OK
		create_colony = {
			owner = event_target:enemy_country
			species = event_target:enemy_country
		}
		while = {
			count = 8
			add_district = district_city
			create_pop = { species = event_target:enemy_country }
		}
	}
}

country_event = {
	id = gfdebug.970

	is_triggered_only = yes

	immediate = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = GF_doll_species
			weights = {
				base = 1
				mult = trigger:num_traits
			}
		}
	}

	option = {
		name = OK
		event_target:GF_doll_species = {
			set_species_flag = doll_with_most_traits
		}
	}
}

country_event = {
	id = gfdebug.975
	desc = gfdebug.975.desc

	is_triggered_only = yes
	trigger = {
		has_origin = GF_origin_commonwealth
	}
	immediate = {
		owner_main_species = { save_event_target_as = main }
		#random_owned_species = {
		#	limit = { has_trait = GF_trait_doll }
		#	save_event_target_as = doll
		#}
		random_galaxy_species = {
			limit = {
				NOT = { has_species_flag = flag_GF_ogas_doll }
				has_trait = GF_trait_doll
			}
			log = "this  = [this.GetName]"
			log = "owner = [owner.GetName]"
			save_event_target_as = doll
		}
	}

	option = {
		name = OK
		add_modifier = {
			modifier = GF_debug_leaders
			mult = 50
		}
		while = {
			count = 2
			create_leader = {
				class = official
				species = event_target:doll

				effect = {
					add_trait_no_notify = random_negative
				}
			}
			create_leader = {
				class = scientist
				species = event_target:doll

				effect = {
					add_trait_no_notify = random_negative
				}
			}
			create_leader = {
				class = commander
				species = event_target:doll

				effect = {
					add_trait_no_notify = random_negative
				}
			}
			create_leader = {
				class = general
				species = event_target:doll

				effect = {
					add_trait_no_notify = random_negative
				}
			}
		}
	}
}

pop_event = {
	id = gfdebug.333

	is_triggered_only = yes
	immediate = { # this = pop
		planet = { # this = planet
			owner = { # this = country
				prev = {
					log = "prev = [this.GetName]"           # planet
					prev = {
						log = "prev={prev = [this.GetName]" # country
					}
				}
				prev.prev = {
					log = "prev.prev = [this.GetName]"      # country
				}
				prevprev = {
					log = "prevprev = [this.GetName]"       # pop
				}
			}
		}
	}
}




